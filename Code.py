# -*- coding: utf-8 -*-
#PassCrypter_bot.ipynb

Automatically generated by Colab.

# Commented out IPython magic to ensure Python compatibility.
# %pip install telebot
# %pip install pyrogram
# %pip install telethon
import telebot
from telebot import types
import time
from pyrogram import Client, filters
from telethon.sync import TelegramClient

bot = telebot.TeleBot(token)

"""Приветствую вас, я способен преобразовывать ваши запоминающиеся простые пароли в сложные пароли, для этого необходимо лишь ввести ваш простой пароль и слово-ключ, которые вы запомните. Я буду незаменимым помощником в защите вашей конфиденциальной информации. С моей помощью вы сможете создавать надежные пароли, которые будут невозможны для злоумышленников и взломщиков. Ваша безопасность - моя первостепенная задача. Для сохранения вашей конфиденциальности, я удаляю историю нашего чата через несколько минут после использования и нигде не сохраняю ваши пароли, чтобы никакой злоумышленник не мог узнать ваши пароли. Для того, чтобы снова увидеть усложнённый пароль, просто напишите мне свой простой пароль и ключ ещё раз, тогда я выдам вам тот же пароль.

def form_dict():
    d = {}
    iter = 0
    for i in range(32, 127):
        d[iter] = chr(i)
        iter = iter + 1
    return d


def encode_val(word):
    list_code = []
    lent = len(word)
    d = form_dict()

    for w in range(lent):
        for value in d:
            if word[w] == d[value]:
                list_code.append(value)
    return list_code


def comparator(value, key):
    len_key = len(key)
    dic = {}
    iter = 0
    full = 0

    for i in value:
        dic[full] = [i, key[iter]]
        full = full + 1
        iter = iter + 1
        if (iter >= len_key):
            iter = 0
    return dic


def full_encode(value, key):
    dic = comparator(value, key)
    lis = []
    d = form_dict()

    for v in dic:
        go = (dic[v][0] + dic[v][1]) % len(d)
        lis.append(go)
    return lis


def decode_val(list_in):
    list_code = []
    lent = len(list_in)
    d = form_dict()

    for i in range(lent):
        for value in d:
            if list_in[i] == value:
                list_code.append(d[value])
    return list_code


user = []
usser = {}


@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("Усложнить пароль")
    markup.add(btn1)
    bot.send_message(message.chat.id,
                     text="Приветствую вас, я способен преобразовывать ваши запоминающиеся 'простые' пароли в более 'сложные' пароли, для этого необходимо лишь ввести ваш 'простой' пароль и слово-ключ, которые вы запомните. ",
                     reply_markup=markup)
    time.sleep(5)
    bot.send_message(message.chat.id,
                     text="Я буду незаменимым помощником в защите вашей конфиденциальной информации. С моей помощью вы сможете создавать надежные пароли, которые будут невозможны для злоумышленников и взломщиков. Ваша безопасность - моя первостепенная задача. ",
                     reply_markup=markup)
    time.sleep(5)
    bot.send_message(message.chat.id,
                     text="Для сохранения вашей конфиденциальности, я удаляю историю нашего чата через несколько минут после использования и нигде не сохраняю ваши пароли, чтобы никакой злоумышленник не мог узнать ваши пароли. ",
                     reply_markup=markup)
    time.sleep(5)
    bot.send_message(message.chat.id,
                     text="Для того, чтобы снова увидеть усложнённый пароль, просто напишите мне свой простой пароль и ключ ещё раз, тогда я выдам вам тот же пароль.")
    time.sleep(5)
    bot.send_message(message.chat.id, text="Что бы вы сейчас хотели сделать?", reply_markup=markup)
    time.sleep(1)


@bot.message_handler(content_types=['text'])
def func(message):
    if (message.text == "Усложнить пароль"):
        bot.send_message(message.chat.id,
                         text="Напоминаю, что для создания простого пароля следует использовать строчные и заглавные латинские буквы, цифры и спецсимволы. Рекомендую использовать разные простые пароли и/или ключевые слова для каждого сервиса.")
        bot.send_message(message.chat.id, text="Введите ваш простой пароль:")
        user.append(message.chat.id)


    elif (message.text == "Вернуться в главное меню"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("Усложнить пароль")
        markup.add(button1)
        bot.send_message(message.chat.id, text="Вы вернулись в главное меню", reply_markup=markup)

    else:
        if (message.chat.id in user):
            if (message.chat.id in usser.keys()):
                word = usser[message.chat.id]
                key = message.text
                key_encoded = encode_val(key)
                value_encoded = encode_val(word)

                shifre = full_encode(value_encoded, key_encoded)

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                back = types.KeyboardButton("Вернуться в главное меню")
                markup.add(back)

                bot.send_message(message.chat.id, text="Ваш пароль: ", reply_markup=markup)
                bot.send_message(message.chat.id, text=''.join(decode_val(shifre)), reply_markup=markup)
                del usser[message.chat.id]
                user.remove(message.chat.id)
            if (message.chat.id in user):
                word = message.text
                bot.send_message(message.chat.id, text="Введите ваше слово-ключ (также латинскими буквами):")
                usser.update({message.chat.id: word})

        else:
            bot.send_message(message.chat.id,
                             text="На такую комманду я пока что не запрограммирован... Возможно вы хотите что-то другое?")


bot.polling()

"""word = input("Напишите пароль, который хотите усовершенствовать: ")

key = input("Напишите ключ, который хотите использовать: ")

key_encoded = encode_val(key)

value_encoded = encode_val(word)

shifre = full_encode(value_encoded, key_encoded)

print ('Ваш пароль: ', ''.join(decode_val(shifre)))
"""
